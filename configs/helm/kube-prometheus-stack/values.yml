defaultRules:
  create: false

alertmanager:
  service:
    annotations:
      prometheus.io/scrape: "true"  
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    maxUnavailable: ""
  ingress:
    enabled: false
  alertmanagerSpec:
    replicas: 1

grafana:
  enabled: true
  ingress:
    enabled: false
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: 'Imported'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      k6-results:
        url: https://raw.githubusercontent.com/StuxxNet/pick-esquenta/main/configs/helm/kube-prometheus-stack/dashboards/k6_results.json
      nignx-ingress-controller:
        url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/grafana/dashboards/nginx.json
      nginx-ingress-handling-performance:
        url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/grafana/dashboards/request-handling-performance.json

kubeControllerManager:
  enabled: false

kubeEtcd:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

kubeStateMetrics:
  enabled: true

kube-state-metrics:
  image:
    pullPolicy: IfNotPresent
  resources: 
    limits:
     memory: 64Mi
    requests:
     cpu: 10m
     memory: 32Mi

nodeExporter:
  operatingSystems:
    darwin:
      enabled: false

prometheus-node-exporter:
  image:
    pullPolicy: IfNotPresent
  resources:
    limits:
     memory: 64Mi
    requests:
     cpu: 10m
     memory: 32Mi

prometheusOperator:
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
  image:
    pullPolicy: IfNotPresent
  prometheusConfigReloader:
    enableProbe: true
    resources:
      requests:
        cpu: 200m
        memory: 50Mi
      limits:
        cpu: 200m
        memory: 50Mi

prometheus:
  enabled: true
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    maxUnavailable: ""
  ingress:
    enabled: false
  prometheusSpec:
    externalUrl: ""
    enableRemoteWriteReceiver: true
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    serviceMonitorNamespaceSelector: {} # get service monitors on all namespaces
    ruleNamespaceSelector: {}
    serviceMonitorSelector: {} # get all existing service monitors
    retention: 30d
    retentionSize: "8GB"
    resources:
      requests:
        cpu: 500m
        memory: 400Mi
      limits: 
        memory: 1Gi
        cpu: 1
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi